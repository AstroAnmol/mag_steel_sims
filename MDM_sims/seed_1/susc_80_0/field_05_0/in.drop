### Avalanching experiment in uniform magnetic field

### Initialization
# Preliminaries
units           si
atom_style      hybrid granular dipole
atom_modify     sort 10000 0

# boundaries
boundary        f f f

#LIGGGHTS-Public shouuld produce the same answers for any newton flag setting, besides round off
newton          off
hard_particles  yes
communicate     single vel yes

# the product of the processors must equal P, the number of processors used when running the file: mpirun -np 4 ...
processors      5 3 2

# load the prepared granular assembly
# change the last field to point to the desired assembly
read_restart    ./restart_steel_mag_settle.static


### VARIABLES DEFINITION

# Dimensions of the box
variable        dom_length equal 0.280 # 280 mm
variable        dom_width  equal 0.085 # 085 mm
variable        dom_height equal 0.130 # 130 mm
variable        mid_wall   equal 0.130 # 130 mm

variable        dom_diag equal sqrt(${dom_length}*${dom_length}+${dom_width}*${dom_width}+${dom_height}*${dom_height})

# Particle properties
variable        particle_dia equal 0.00635 # 06.35 mm
variable        particle_radius equal ${particle_dia}/2 # mm

# Neighbor skin distance
# variable        skin_dist equal  2*${particle_dia} #meters 2 diameters, overall 3 diameters 
variable        skin_dist equal  0.6#${dom_diag} # domain diagonal for magnetic sims

################################
# Material properties
################################

# TYPE 1: AISI 52100 Steel
variable        density_steel equal 7800 # kg/m3
variable        youngsM_steel equal 210e7 # N/m^2
variable        poissons_steel equal 0.30

# TYPE 2: 260 Brass
variable        density_brass equal 8500 # kg/m3
variable        youngsM_brass equal 110e7 # N/m^2
variable        poissons_brass equal 0.375

# TYPE 3: Wall (Acrylic)
variable        density_wall equal 1250 # kg/m3
variable        youngsM_wall equal 3e7 # N/m^2
variable        poissons_wall equal 0.4

# Friction Properties
variable        friction_coeff_11 equal 0.2 # Steel-Steel
variable        friction_coeff_12 equal 0.15 # Steel-Brass
variable        friction_coeff_13 equal 0.10 # Steel-Wall

variable        friction_coeff_21 equal ${friction_coeff_12}
variable        friction_coeff_22 equal 0.25 # Brass-Brass (doesn't interact)
variable        friction_coeff_23 equal 0.25 # Brass-Wall (doesn't interact)

variable        friction_coeff_31 equal ${friction_coeff_13}
variable        friction_coeff_32 equal ${friction_coeff_23}
variable        friction_coeff_33 equal 0.15 # Wall-Wall (doesn't interact)

# Rolling Friction Properties

# Rolling friction coefficient
variable        rolling_coeff_11 equal 0.02 # Steel-Steel
variable        rolling_coeff_12 equal 0.015 # Steel-Brass
variable        rolling_coeff_13 equal 0.01 # Steel-Wall

variable        rolling_coeff_21 equal ${rolling_coeff_12}
variable        rolling_coeff_22 equal 0.02 # Brass-Brass (doesn't interact)
variable        rolling_coeff_23 equal 0.02 # Brass-Wall (doesn't interact)

variable        rolling_coeff_31 equal ${rolling_coeff_13}
variable        rolling_coeff_32 equal ${rolling_coeff_23}
variable        rolling_coeff_33 equal 0.02 # Wall-Wall (doesn't interact)


# Rolling Damp
variable        rolling_damp equal 0.02
variable        rolling_damp_11 equal ${rolling_damp} # Steel-Steel
variable        rolling_damp_12 equal ${rolling_damp} # Steel-Brass
variable        rolling_damp_13 equal ${rolling_damp} # Steel-Wall

variable        rolling_damp_21 equal ${rolling_damp_12}
variable        rolling_damp_22 equal ${rolling_damp} # Brass-Brass (doesn't interact)
variable        rolling_damp_23 equal ${rolling_damp} # Brass-Wall (doesn't interact)

variable        rolling_damp_31 equal ${rolling_damp_13}
variable        rolling_damp_32 equal ${rolling_damp_23}
variable        rolling_damp_33 equal ${rolling_damp} # Wall-Wall (doesn't interact)

# Coefficient of Restitution
variable        coeff_rest_11 equal 0.8 # Steel-Steel
variable        coeff_rest_12 equal 0.7 # Steel-Brass
variable        coeff_rest_13 equal 0.4 # Steel-Wall

variable        coeff_rest_21 equal ${coeff_rest_12}
variable        coeff_rest_22 equal 0.4 # Brass-Brass (doesn't interact)
variable        coeff_rest_23 equal 0.4 # Brass-Wall (doesn't interact)

variable        coeff_rest_31 equal ${coeff_rest_13}
variable        coeff_rest_32 equal ${coeff_rest_23}
variable        coeff_rest_33 equal 0.4 # Wall-Wall (doesn't interact)

# Cohesion Energy Density (J/m2)
variable        cohesion_energy equal 2e-3 # J/m^2
variable        cohesion_energy_11 equal ${cohesion_energy} # Steel-Steel
variable        cohesion_energy_12 equal ${cohesion_energy} # Steel-Brass
variable        cohesion_energy_13 equal ${cohesion_energy} # Steel-Wall

variable        cohesion_energy_21 equal ${cohesion_energy_12}
variable        cohesion_energy_22 equal ${cohesion_energy} # Brass-Brass (doesn't interact)
variable        cohesion_energy_23 equal ${cohesion_energy} # Brass-Wall (doesn't interact)

variable        cohesion_energy_31 equal ${cohesion_energy_13}
variable        cohesion_energy_32 equal ${cohesion_energy_23}
variable        cohesion_energy_33 equal ${cohesion_energy} # Wall-Wall (doesn't interact)

# Magnetic Susceptibility
variable        magnetic_susc_steel equal 80.0
variable        magnetic_susc_brass equal 0
variable        magnetic_susc_wall equal 0

# Force properties
variable        grav_value equal 9.8 #m/s^2
variable        mag_B_F equal 0.0050 # T (B field)
variable        mag_H_F equal ${mag_B_F}*795774.71545947673925 # A/m (H field)

# Time steps
variable        dt equal 5e-6 # s every 5 microseconds
variable        dumptime equal 1e-3 # s every millisecond
variable        dumpstep equal ${dumptime}/${dt}
variable        thermostep equal ${dumpstep}
variable        checktimestep equal 1e-3/${dt} 
variable        magtime equal 1e-3 
variable        magstep equal ${magtime}/${dt} # calculate new magnetic forces every magstep steps
variable        neighstep equal 1e-2/${dt} # create a new neigh list 

variable        milli_second_steps equal 1e-3/${dt} # number of steps for a ten milli second
variable        deci_second_steps equal 0.1/${dt} # number of steps for 0.1 seconds time
variable        half_second_steps equal 0.5/${dt} # number of steps for 0.5 seconds time
variable        one_second_steps equal 1/${dt} # number of steps for 1 second time


# Neighbor skin style - atom pairs within a neighbor cutoff distance = force cutoff + skin distance, styele = bin
neighbor        ${skin_dist} bin
# neigh_modify delay 0, this is the default, rebuild neighbor list every timestep
neigh_modify    delay 0 one 5000 every ${neighstep} check no

### Setup
# Material and interaction properties required

fix             m1 all property/global youngsModulus peratomtype ${youngsM_steel} ${youngsM_brass} ${youngsM_wall}
fix             m2 all property/global poissonsRatio peratomtype ${poissons_steel} ${poissons_brass} ${poissons_wall}
fix             m3 all property/global coefficientRestitution peratomtypepair 3 ${coeff_rest_11} ${coeff_rest_12} ${coeff_rest_13} &
                                        ${coeff_rest_21} ${coeff_rest_22} ${coeff_rest_23} ${coeff_rest_31} ${coeff_rest_32} ${coeff_rest_33}

fix             m4 all property/global coefficientFriction peratomtypepair 3 ${friction_coeff_11} ${friction_coeff_12} ${friction_coeff_13} &
                                ${friction_coeff_21} ${friction_coeff_22} ${friction_coeff_23} ${friction_coeff_31} ${friction_coeff_32} ${friction_coeff_33}

fix             m5 all property/global coefficientRollingFriction peratomtypepair 3 ${rolling_coeff_11} ${rolling_coeff_12} ${rolling_coeff_13} &
                                        ${rolling_coeff_21} ${rolling_coeff_22} ${rolling_coeff_23} ${rolling_coeff_31} ${rolling_coeff_32} ${rolling_coeff_33}

fix             m6 all property/global coefficientRollingViscousDamping peratomtypepair 3 ${rolling_damp_11} ${rolling_damp_12} ${rolling_damp_13} &
                                        ${rolling_damp_21} ${rolling_damp_22} ${rolling_damp_23} ${rolling_damp_31} ${rolling_damp_32} ${rolling_damp_33}

fix             m8 all property/global cohesionEnergyDensity peratomtypepair 3 ${cohesion_energy_11} ${cohesion_energy_12} ${cohesion_energy_13} &
                                    ${cohesion_energy_21} ${cohesion_energy_22} ${cohesion_energy_23} ${cohesion_energy_31} ${cohesion_energy_32} ${cohesion_energy_33}


fix             m9 all property/global magneticSusceptibility peratomtype ${magnetic_susc_steel} ${magnetic_susc_brass} ${magnetic_susc_wall}

## Pair style
pair_style      gran model hertz tangential history cohesion sjkr rolling_friction epsd torsionTorque on
pair_coeff	    * *  # the asterisks set force field coeefficients for all atom types, but then no other args? ASK TOM

## box walls - define simulation 	
fix		        wall_z1 all wall/gran model hertz tangential history cohesion sjkr rolling_friction epsd primitive type 3 zplane 0.0        #floor
fix		        wall_z2 all wall/gran model hertz tangential history cohesion sjkr rolling_friction epsd primitive type 3 zplane ${dom_height}
fix             wall_x1 all wall/gran model hertz tangential history cohesion sjkr rolling_friction epsd primitive type 3 xplane 0.0            
fix             wall_x2 all wall/gran model hertz tangential history cohesion sjkr rolling_friction epsd primitive type 3 xplane ${dom_length}
fix             wall_y1 all wall/gran model hertz tangential history cohesion sjkr rolling_friction epsd primitive type 3 yplane 0.0            
fix             wall_y2 all wall/gran model hertz tangential history cohesion sjkr rolling_friction epsd primitive type 3 yplane ${dom_width}

## wall in centre which is removed to simulate mass wasting
fix             wall_center all wall/gran model hertz tangential history cohesion sjkr rolling_friction epsd primitive type 3 xplane ${mid_wall}


# Gravity
variable        grav_value equal 9.8 #m/s^2
fix             grav all gravity ${grav_value} vector 0.0 0.0 -1.0 # negative z

# Time step
timestep        ${dt} #seconds (0.2 microsecond)

## Thermo settings
# thermo style custom says what thermo data we want printed at each thermo timestep - timestep, num atoms, kinetic energy, volume
thermo_style 	custom step atoms ke vol
# thermo output every therostep timesteps
thermo		    ${thermostep}
# LIGGGHTS will ignore last particles and will not normalize against num atoms
thermo_modify	lost ignore norm no


## Particle insertion
variable        2_5_particle_rad equal ${particle_radius}*2.5
variable        number_of_particles equal 4200

variable        fill_height equal 0.072 #mm
variable        floor_height equal 0.00862243
variable        fill_height_f equal ${floor_height}+${fill_height}


### Detailed settings
# apply nve integration to all particles that are inserted as single particles
fix		        integr prtcls nve/sphere update dipole


# Check time step and initialize dump file
fix             ctg all check/timestep/gran ${checktimestep} 0.05 0.05
# run             1
# unfix           ctg

# Create imaging information
dump            dmp all custom ${dumpstep} results_steel_mag/dump*.post id type x y z vx vy vz radius fx fy fz magfx magfy magfz mux muy muz mass


# ensure particles are static 
# velocity       all set 0. 0. 0.

## freeze
fix             floor_freeze pts_floor freeze

run             0

fix             mag all magnetic    0 0 ${mag_H_F} ${magstep} mdm convergence
fix             ctm all check/timestep/mag ${magstep} 0.001


# pull the stopper
unfix           wall_center

# RUN FOR 0.5 SECONDS

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

# RUN FOR 0.5 SECONDS

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

# RUN FOR 0.5 SECONDS

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

run             ${deci_second_steps}

write_restart   restart_steel_mag_drop.static

# --- Running extra to check for KE ---

compute         ke all ke  update_on_run_end yes 

variable        target_ke equal 5E-06
variable        N_loop_steps equal ${half_second_steps}/${thermostep}

# Loop until kinetic energy is below the target
label           loop
variable        ii loop ${N_loop_steps}
run             ${thermostep}

variable        current_ke equal c_ke

# Check if current kinetic energy is less than the target
if "${current_ke} < ${target_ke}" then &
"print 'Simulation finished: Kinetic energy reached target value: ${current_ke}'" &
"jump SELF break"

next            ii
jump            SELF loop

label           break
print           "Simulation finished after ${ii} iterations."
write_restart   restart_steel_mag_drop.static


# --- End of Script ---